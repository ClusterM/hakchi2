#!/bin/sh

set -x

export MALI_NOCLEAR=1

decorative_options()
{
  local fn="$1_options.txt"
  if [ ! -f "$fn" ] ; then
    return
  fi
  while read option ; do
    case "$option" in
    hue) printf ' --decorative-frame-hue';;
    luminosity) printf ' --decorative-frame-luminosity';;
    saturation) printf ' --decorative-frame-saturation';;
    esac
  done < "$fn"
}

options=""

rom="non_existing_file"
filter_settings=""
bwt_data_dir=/etc/bwt_snes_filters

setup_filter_settings()
{
    #Controller pseudo-file
    clovercon=/dev/input/by-path/platform-twi.1-event-joystick
    images_path=$bwt_data_dir

    #Display memory
    output_device=/dev/fb0

    post_proc_filter=0
    mag_filter=0
    pixel_perfect=""

    #Sometimes this is needed (when loading a game through suspended state, sometimes the screen is updated after blitting the image to the screen, we prevent that here)
    usleep 500000
    gunzip -c $images_path/cfg_filters.raw.gz > $output_device

    # Wait while pseudo-file doesn't exists (controller is not connected or is not initialized yet)
    while [ ! -e $clovercon ]; do usleep 100; done

    while [ true ]
    do
        packet=$(/usr/bin/hexdump -e '1/1 "%02x"' -v -n 16 $clovercon)
        button=${packet:20:4}
        pressed=${packet:24:2}

        #Button state pressed is 01 for normal buttons and select/start and F8 for the bumper
        #buttons, but for all of them 00 is a release
        if [ "$pressed" == "00" ]
        then
        
            case $button in
            3001)post_proc_filter=$((post_proc_filter+1)); if [ $post_proc_filter -gt 3 ]; then post_proc_filter=3; fi ;;
            3101)mag_filter=$((mag_filter+1)); if [ $mag_filter -gt 3 ]; then mag_filter=3; fi ;;
            3301)pixel_perfect=" --pixel-perfect"  ;;
            3401)pixel_perfect="" ;;
            3a01)post_proc_filter=0; mag_filter=0; gunzip -c $images_path/cfg_filters_reset.raw.gz > $output_device; sleep 2; gunzip -c $images_path/cfg_filters.raw.gz > $output_device ;;
            3b01)break ;;
            esac
        fi
    done
    
    #Remove pixels (sometimes this is needed)
    gunzip -c $images_path/cfg_filters_black.raw.gz > $output_device
    filter_settings="-filter $post_proc_filter -magfilter $mag_filter$pixel_perfect"
}

B_LB=""
B_RB=""

get_controller_button_states()
{
    controller_state=`cat /dev/clovercon1`
    controller_value=`printf %d 0x$controller_state`

    #B_X=$((controller_value & 1))
    #B_Y=$(((controller_value & 2)>>1))
    B_LB=$(((controller_value & 4)>>2))
    B_RB=$(((controller_value & 8)>>3))
    #B_A=$(((controller_value & 256)>>8))
    #B_B=$(((controller_value & 512)>>9))
    #B_SELECT=$(((controller_value & 1024)>>10))
    #B_START=$(((controller_value & 2048)>>11))
    #B_UP=$(((controller_value & 4096)>>12))
    #B_DOWN=$(((controller_value & 8192)>>13))
    #B_LEFT=$(((controller_value & 16384)>>14))
    #B_RIGHT=$(((controller_value & 32768)>>15))
}

get_controller_button_states

while [ $# -gt 0 ] ; do
  case "$1" in
  --title-code) title_code="$2"; shift ;;
  --load-state-file) options="$options -resume" ;;
  --save-data-backing-file) options="$options --sram-file" ;;
  --replay-inputs) options="$options -replay-all -replay" ;;
  --record-inputs) options="$options -record-next -enable-pad-debug-controls" ;;
  --video-mode)
    case "$2" in
    keep-aspect-ratio) filter_settings="-filter 1 -magfilter 3" ;;
    pixel-perfect) filter_settings="-filter 1 --pixel-perfect" ;;
    crt-filter) filter_settings="-filter 2 -magfilter 1" ;;
    esac
    shift
    ;;
  --rollback-mode)
    case "$2" in
    record) options="$options -rollback-mode 1" ;;
    replay) options="$options -rollback-mode 2" ;;
    esac
    options="$options --rollback-ui /usr/share/canoe/rollback-ui"
    options="-rollback-snapshot-period 720 $options"
    options="$options --enable-sram-file-hash"
    shift
    ;;
  --rollback-output-dir) options="$options -rollback-output-dir $2"; shift ;;
  --rollback-input-dir) options="$options -rollback-input-dir $2"; shift ;;
  --decorative-frame-path) options="$options --use-decorative-frame $2 $(decorative_options $2)"; shift ;;
  *.sfrom)
    rom=$1
    if [ -f "$1.gz" ]; then
        options="$options /tmp/ROM.sfrom"
        gunzip -c "$1.gz" > /tmp/ROM.sfrom
    else
        options="$options $1"
    fi
    ;;
  *) options="$options $1" ;;
  esac
  shift
done

filter_settings_file=`echo $rom | tr / _`
filter_settings_file=$bwt_data_dir/$filter_settings_file
if [ -f "$filter_settings_file" ] && [ -f "$rom" ] && [ "$B_LB" == "1" ] && [ "$B_RB" == "0" ]
then
    filter_settings=`cat $filter_settings_file`
else
    if [ "$B_LB" == "1" ] && [ "$B_RB" == "1" ]
    then    
        filter_settings=""
        setup_filter_settings
    fi
fi

get_controller_button_states
if [ "$B_RB" == "1" ] && [ "$B_LB" == "0" ]
then
    if [ -f "$rom" ]
    then
        echo $filter_settings > $filter_settings_file
    fi
fi

options="$options $filter_settings"

read BUILD_TYPE < /etc/clover/buildtype
case "$BUILD_TYPE" in
devel) log="-log $title_code.log -log-append --debug-menu-settings /var/lib/clover/canoe/debug-menu.json --decorative-frames-path /usr/share/backgrounds" ;;
test) log="-log $title_code.log" ;;
*) ;;
esac

exec canoe-shvc $options $log
