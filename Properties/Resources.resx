<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AreYouSure" xml:space="preserve">
    <value>Are you sure?</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="blank" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\images\blank.jpg;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="BuildingCustom" xml:space="preserve">
    <value>Building the custom kernel image...</value>
  </data>
  <data name="Congratulations" xml:space="preserve">
    <value>Congratulations!</value>
  </data>
  <data name="CustomKernel" xml:space="preserve">
    <value>Custom kernel</value>
  </data>
  <data name="CustomKernelQ" xml:space="preserve">
    <value>Do you want to flash the custom kernel?</value>
  </data>
  <data name="CustomWarning" xml:space="preserve">
    <value>Now you need to flash the custom kernel to your NES Mini. This is also required only once. Do you want to continue?</value>
  </data>
  <data name="Default30games" xml:space="preserve">
    <value>Original 30 games</value>
  </data>
  <data name="DeleteQ" xml:space="preserve">
    <value>Delete {0}?</value>
  </data>
  <data name="Done" xml:space="preserve">
    <value>Done!</value>
  </data>
  <data name="DoneUploaded" xml:space="preserve">
    <value>Done! Wait until the power led goes out and restart your NES Mini.</value>
  </data>
  <data name="DoneYouCanUpload" xml:space="preserve">
    <value>Done! You can upload games to your NES Mini now.</value>
  </data>
  <data name="DoYouWantCancel" xml:space="preserve">
    <value>Do you want to cancel the current operation?</value>
  </data>
  <data name="DoYouWantToContinue" xml:space="preserve">
    <value>Do you want to continue?</value>
  </data>
  <data name="DumpingKernel" xml:space="preserve">
    <value>Dumping kernel...</value>
  </data>
  <data name="DumpKernelQ" xml:space="preserve">
    <value>Do you want to dump the kernel?</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ExecutingCommand" xml:space="preserve">
    <value>Executing command:</value>
  </data>
  <data name="ExecutingFel1" xml:space="preserve">
    <value>Executing fes1...</value>
  </data>
  <data name="FlasingCustom" xml:space="preserve">
    <value>Flashing custom kernel...</value>
  </data>
  <data name="FlasingOriginal" xml:space="preserve">
    <value>Flashing original kernel...</value>
  </data>
  <data name="GamesSelected" xml:space="preserve">
    <value>games(s) selected</value>
  </data>
  <data name="InvalidKernelHeader" xml:space="preserve">
    <value>Invalid kernel header.</value>
  </data>
  <data name="InvalidKernelSize" xml:space="preserve">
    <value>Invalid kernel size:</value>
  </data>
  <data name="MapperNotSupported" xml:space="preserve">
    <value>Sorry, {0} uses mapper #{1} but this mapper is not supported by NES Mini and game probably will not start. Do you want to add this game anyway?</value>
  </data>
  <data name="MD5Failed" xml:space="preserve">
    <value>Kernel dumped but MD5 checksum is unknown:</value>
  </data>
  <data name="MD5Failed2" xml:space="preserve">
    <value>Maybe the kernel already patched or it's unknown revision. Please send this message to me (press Ctrl+C). Continue on your own risk.</value>
  </data>
  <data name="NoKernel" xml:space="preserve">
    <value>No kernel dump found</value>
  </data>
  <data name="NoKernelWarning" xml:space="preserve">
    <value>First of all you need to dump the kernel image of your NES Mini. You need to do it only once. Do you want to continue?</value>
  </data>
  <data name="NoKernelYouNeed" xml:space="preserve">
    <value>No kernel dump found. You need to dump kernel first.</value>
  </data>
  <data name="OriginalKernelQ" xml:space="preserve">
    <value>Do you want to flash the original kernel?</value>
  </data>
  <data name="PleaseTryAgain" xml:space="preserve">
    <value>Please try again.</value>
  </data>
  <data name="PressOkToContinue" xml:space="preserve">
    <value>Press OK to continue.</value>
  </data>
  <data name="ReplaceKernelQ" xml:space="preserve">
    <value>You already have the kernel dump. If you REALLY want to replace buckup of you kernel and you REALLY understand what you are doing delete "dump" folder manually.</value>
  </data>
  <data name="SelectAtLeast" xml:space="preserve">
    <value>You need to select at least one game.</value>
  </data>
  <data name="UploadingFes1" xml:space="preserve">
    <value>Uploading and running fes1...</value>
  </data>
  <data name="UploadingGames" xml:space="preserve">
    <value>Uploading games...</value>
  </data>
  <data name="UploadingKernel" xml:space="preserve">
    <value>Uploading the kernel...</value>
  </data>
  <data name="VerifyFailed" xml:space="preserve">
    <value>Verify failed :O This is no good.</value>
  </data>
  <data name="Verifying" xml:space="preserve">
    <value>Verifying...</value>
  </data>
  <data name="WaitingForDevice" xml:space="preserve">
    <value>Waiting for the device...</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning!</value>
  </data>
  <data name="Wow" xml:space="preserve">
    <value>Wow</value>
  </data>
  <data name="ManyGames" xml:space="preserve">
    <value>NES Mini can handle only 97 games but you selected {0} games.  Do you want to continue?</value>
  </data>
  <data name="PleaseTryAgainUSB" xml:space="preserve">
    <value>If this problem repeats try to use another USB port or another USB cable.</value>
  </data>
  <data name="XpZadig" xml:space="preserve">
    <value>Please use Zadig util to install driver on Windows XP/2000.</value>
  </data>
  <data name="Donate" xml:space="preserve">
    <value>P.S. If you like it you can donate me. You can find my PayPal into the "About" box.</value>
  </data>
  <data name="FirstRun" xml:space="preserve">
    <value>Hello there! I'm very glad that you are using my application. It's very simple to use. Just click "Add more games", select some ROMs, press "Synchronize" and follow the instructions. Good luck!</value>
  </data>
  <data name="Hello" xml:space="preserve">
    <value>Hello</value>
  </data>
  <data name="KernelDumped" xml:space="preserve">
    <value>Your original kernel saved in the "dump" folder. It's better not to lose it. </value>
  </data>
  <data name="DeletePreset" xml:space="preserve">
    <value>Do you really want to delete "{0}" preset?</value>
  </data>
  <data name="FourScreenNotSupported" xml:space="preserve">
    <value>Sorry, {0} uses four-screen mode (i.e.  it's rare case the game has additional VRAM memory in cartridge) and this feature is not supported by NES Mini. Game probably will not start. Do you want to add this game anyway?</value>
  </data>
  <data name="InputPreset" xml:space="preserve">
    <value>Please input preset name for current games selection.</value>
  </data>
  <data name="NewPreset" xml:space="preserve">
    <value>New selection preset</value>
  </data>
  <data name="UninstallFactoryNote" xml:space="preserve">
    <value>Don't forget to do reset to factory settings if you want to delete all savestates.</value>
  </data>
  <data name="Uninstalling" xml:space="preserve">
    <value>Uninstalling...</value>
  </data>
  <data name="UninstallQ1" xml:space="preserve">
    <value>Do you really want to clean all traces of hakchi2 and return your NES Mini to original state?</value>
  </data>
  <data name="UninstallQ2" xml:space="preserve">
    <value>Done. Wait until the power led goes out. Also you need to flash original kernel. Do you want to flash original kernel now?</value>
  </data>
  <data name="GameGenieFormatError" xml:space="preserve">
    <value>Invalid Game Genie code "{0}" for game "{1}".</value>
  </data>
  <data name="GameGenieNotFound" xml:space="preserve">
    <value>Can't apply Game Genie code "{0}" to game "{1}" -  value not found. Maybe this code for other game?</value>
  </data>
  <data name="PatchAvailable" xml:space="preserve">
    <value>Patch available</value>
  </data>
  <data name="PatchQ" xml:space="preserve">
    <value>There is patch for "{0}". Do you want to patch this game?</value>
  </data>
</root>